{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { ADD_TODO, TOGGLE_TODO, SET_VISIBILITY_FILTER, VisibilityFilters } from '../actions/actions';\nconst SHOW_ALL = VisibilityFilters.SHOW_ALL;\nconst initialState = {\n  visibilityFilter: VisibilityFilters.SHOW_ALL,\n  todos: []\n  /*\n  * The reducer take oldState and an action and create\n  * a new state /!\\ NO MUTATE BUT CREATE NEW OBJECT /!\\\n  * Just remember to never assign to anything inside\n  * the state unless you clone it first\n  */\n\n};\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [...state, {\n        text: action.text,\n        completed: false\n      }];\n\n    default:\n      return state;\n  }\n}\n/*\n* we split todoApp and todos and we just give a slice of the state for\n* todos (add_todos). It's called Reducer Composition\n*/\n// function todoApp(state = initialState, action) {\n//\n// \tswitch(action.type) {\n// \t\tcase SET_VISIBILITY_FILTER:\n// \t\t\treturn Object.assign({}, state, {\n// \t\t\t\tvisibilityFilter: action.filter\n// \t\t\t})\n// \t\tcase ADD_TODO:\n// \t\t\treturn Object.assign({}, state, {\n// \t\t\t\ttodos: todos(state.todos, action)\n// \t\t\t})\n// \t\tdefault:\n// \t\t\treturn state\n// \t}\n// \treturn state;\n// }\n\n\nfunction visibilityFilter(state = SHOW_ALL, action) {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter;\n\n    default:\n      return state;\n  }\n}\n\nconst todoApp = combineReducers({\n  visibilityFilter,\n  todos\n});\nexport default todoApp;","map":{"version":3,"sources":["/Users/dormin/React_Noob/Redux/my-app/src/reducers/todosReducer.js"],"names":["combineReducers","ADD_TODO","TOGGLE_TODO","SET_VISIBILITY_FILTER","VisibilityFilters","SHOW_ALL","initialState","visibilityFilter","todos","state","action","type","text","completed","filter","todoApp"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SACCC,QADD,EAECC,WAFD,EAGCC,qBAHD,EAICC,iBAJD,QAKO,oBALP;MAOQC,Q,GAAaD,iB,CAAbC,Q;AAER,MAAMC,YAAY,GAAG;AACpBC,EAAAA,gBAAgB,EAAEH,iBAAiB,CAACC,QADhB;AAEpBG,EAAAA,KAAK,EAAE;AAGR;;;;;;;AALqB,CAArB;;AAYA,SAASA,KAAT,CAAgBC,KAAK,GAAG,EAAxB,EAA4BC,MAA5B,EAAoC;AACnC,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKV,QAAL;AACC,aAAO,CACN,GAAGQ,KADG,EAEN;AACCG,QAAAA,IAAI,EAAEF,MAAM,CAACE,IADd;AAECC,QAAAA,SAAS,EAAE;AAFZ,OAFM,CAAP;;AAOD;AACC,aAAOJ,KAAP;AAVF;AAYA;AAED;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASF,gBAAT,CAA0BE,KAAK,GAAGJ,QAAlC,EAA4CK,MAA5C,EAAoD;AACnD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKR,qBAAL;AACC,aAAOO,MAAM,CAACI,MAAd;;AACD;AACC,aAAOL,KAAP;AAJF;AAMA;;AAED,MAAMM,OAAO,GAAGf,eAAe,CAAC;AAC/BO,EAAAA,gBAD+B;AAE/BC,EAAAA;AAF+B,CAAD,CAA/B;AAMA,eAAeO,OAAf","sourcesContent":["import { combineReducers } from 'redux';\nimport {\n\tADD_TODO,\n\tTOGGLE_TODO,\n\tSET_VISIBILITY_FILTER,\n\tVisibilityFilters\n} from '../actions/actions'\n\nconst { SHOW_ALL } = VisibilityFilters;\n\nconst initialState = {\n\tvisibilityFilter: VisibilityFilters.SHOW_ALL,\n\ttodos: []\n}\n\n/*\n* The reducer take oldState and an action and create\n* a new state /!\\ NO MUTATE BUT CREATE NEW OBJECT /!\\\n* Just remember to never assign to anything inside\n* the state unless you clone it first\n*/\n\nfunction todos( state = [], action) {\n\tswitch (action.type) {\n\t\tcase ADD_TODO:\n\t\t\treturn [\n\t\t\t\t...state,\n\t\t\t\t{\n\t\t\t\t\ttext: action.text,\n\t\t\t\t\tcompleted: false\n\t\t\t\t}\n\t\t\t]\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n/*\n* we split todoApp and todos and we just give a slice of the state for\n* todos (add_todos). It's called Reducer Composition\n*/\n\n\n// function todoApp(state = initialState, action) {\n//\n// \tswitch(action.type) {\n// \t\tcase SET_VISIBILITY_FILTER:\n// \t\t\treturn Object.assign({}, state, {\n// \t\t\t\tvisibilityFilter: action.filter\n// \t\t\t})\n// \t\tcase ADD_TODO:\n// \t\t\treturn Object.assign({}, state, {\n// \t\t\t\ttodos: todos(state.todos, action)\n// \t\t\t})\n// \t\tdefault:\n// \t\t\treturn state\n// \t}\n// \treturn state;\n// }\n\nfunction visibilityFilter(state = SHOW_ALL, action) {\n\tswitch (action.type) {\n\t\tcase SET_VISIBILITY_FILTER:\n\t\t\treturn action.filter;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst todoApp = combineReducers({\n\tvisibilityFilter,\n\ttodos\n})\n\n\nexport default todoApp;\n"]},"metadata":{},"sourceType":"module"}